/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CalculatorInterface extends utils.Interface {
  functions: {
    "division(uint16,uint16)": FunctionFragment;
    "multiplication(uint16,uint16)": FunctionFragment;
    "subtraction(uint16,uint16)": FunctionFragment;
    "sum(uint16,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "division"
      | "multiplication"
      | "subtraction"
      | "sum"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "division",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplication",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subtraction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sum",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "division", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subtraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sum", data: BytesLike): Result;

  events: {};
}

export interface Calculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    division(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    multiplication(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    subtraction(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    sum(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  division(
    number1: PromiseOrValue<BigNumberish>,
    number2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  multiplication(
    number1: PromiseOrValue<BigNumberish>,
    number2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  subtraction(
    number1: PromiseOrValue<BigNumberish>,
    number2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  sum(
    number1: PromiseOrValue<BigNumberish>,
    number2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    division(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    multiplication(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    subtraction(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    sum(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    division(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplication(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subtraction(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sum(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    division(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiplication(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subtraction(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sum(
      number1: PromiseOrValue<BigNumberish>,
      number2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
